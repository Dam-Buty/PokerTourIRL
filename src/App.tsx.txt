import React, { useState, ChangeEvent } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { api } from "./backend/src/app";

interface Player {
  id: number;
  nom: string;
  rebuy: number;
  parties: Partie[];
  email: string;
}

interface Partie {
  id: number;
  date: string;
  buy_in: number;
  rebuy: number;
  place: number;
  points: number;
  player: Player;
  championnat: Championnat;
}

interface Championnat {
  id: number;
  saison: number;
  parties: Partie[];
  pokerparty: Pokerparty;
}

interface Pokerparty {
  id: number;
  date: string;
  championnats: Championnat[];
}

const App: React.FC = () => {
  const [players, setPlayers] = useState<Player[]>([]);
  const [partie, setPartie] = useState<Partie[]>([]);
  const [selectedChampionnat, setSelectedChampionnat] = useState<number | null>(null);

  const [newPartie, setNewPartie] = useState({
    date: new Date(),
    buy_in: 0,
    rebuy: 0,
    place: 0,
    points: 0,
    player_id: null,
    championnat_id: null,
  });

  const fetchChampionnat = async (id: number): Promise<Championnat | null> => {
    try {
      const response = await api.get(`/championnats/${id}`);
     
        return response.data;
     
    } catch (err) {
      console.error(err);
      return null;
    }
  };

  const handleNewPartieChange = (event: ChangeEvent<HTMLInputElement>) => {
    setNewPartie({ ...newPartie, [event.target.name]: Number(event.target.value) });
  };

  const handleDateChange = (date: Date) => {
    setNewPartie({ ...newPartie, date});
  };

  const handleAddNewPartie = async () => {
    if (newPartie.player_id === null) {
      alert("Please select a player before adding a new game");
      return;
    }

    const player = players.find(player => player.id === newPartie.player_id);

    if (!player) {
      alert("Selected player not found");
      return;
    }
    if (selectedChampionnat === null) {
      alert("Please select a championnat before adding a new game");
      return;
    }

    // fetch the championnat corresponding to the selectedChampionnat ID
    const championnat = await fetchChampionnat(selectedChampionnat);
    if (!championnat) {
      alert("Selected championnat not found");
      return;
    }

    const newPartieWithId: Partie = {
      id: partie.length + 1,
      ...newPartie,
      date: newPartie.date.toISOString(),
      player: player,
      championnat: championnat, // set the championnat property to the fetched championnat object
    };
    setPartie([...partie, newPartieWithId]);
    setNewPartie({
      date: new Date(),
      buy_in: 0,
      rebuy: 0,
      place: 0,
      points: 0,
      player_id: null,
      championnat_id: null,
    });
  };

  return (
    <div>
      <h1>Championnat de Poker Holdem No Limit</h1>
      <h2>Participants</h2>
      <label htmlFor="newPartieDate">Date : </label>
      <DatePicker selected={newPartie.date} onChange={handleDateChange} />
      <label htmlFor="newPartieBuyIn">Buy In: </label>
      <input id="newPartieBuyIn" name="buy_in" type="number" value={newPartie.buy_in} onChange={handleNewPartieChange} />
      <label htmlFor="newPartieRecave">Rebuy: </label>
      <input id="newPartieRecave" name="rebuy" type="number" value={newPartie.rebuy} onChange={handleNewPartieChange} />
      <label htmlFor="newPartiePlace">Place: </label>
      <input id="newPartiePlace" name="place" type="number" value={newPartie.place} onChange={handleNewPartieChange} />
      <label htmlFor="newPartiePoints">Points: </label>
      <input id="newPartiePoints" name="points" type="number" value={newPartie.points} onChange={handleNewPartieChange} />
      <button onClick={handleAddNewPartie}>Ajouter</button>
    </div>
  );
};

export default App;

 
